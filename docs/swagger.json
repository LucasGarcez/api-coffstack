{
  "openapi": "3.0.0",
  "info": {
    "title": "Nubble App API",
    "version": "1.0.0",
    "description": "Documentação da API do Nubble App"
  },
  "paths": {
    "/register": {
      "post": {
        "summary": " (AuthController::register)",
        "description": "REGISTER A NEW USER",
        "parameters": [
          {
            "in": "path",
            "name": "provider",
            "description": "The login provider to be used",
            "schema": {
              "example": "google",
              "type": "string",
              "enum": ["google", "facebook", "apple"]
            },
            "required": true
          }
        ],
        "tags": ["AUTH"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" },
                "example": {
                  "first_name": "string",
                  "last_name": "string",
                  "username": "string",
                  "email": "johndoe@example.com",
                  "id": "number",
                  "full_name": "string"
                }
              }
            }
          }
        },
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/User" },
              "example": {
                "firstName": "string",
                "lastName": "string",
                "username": "string",
                "email": "johndoe@example.com",
                "password": "string",
                "password_confirmation": "string"
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "summary": " (AuthController::login)",
        "description": "LOGIN IN A EXISTED ACCOUNT",
        "parameters": [],
        "tags": ["AUTH"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "type": "object" },
                "example": { "user": { "type": "bearer", "token": "xxxxxxx" } }
              }
            },
            "description": "OK: {\"token\": \"xxxxxxx\"}"
          }
        },
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object" },
              "example": { "email": "string", "password": "string" }
            }
          }
        }
      }
    },
    "/refresh-token": {
      "post": {
        "summary": " (AuthController::refreshToken)",
        "description": "",
        "parameters": [],
        "tags": ["AUTH"],
        "responses": { "201": { "description": "Created", "content": { "application/json": {} } } },
        "security": [],
        "requestBody": { "content": { "application/json": {} } }
      }
    },
    "openapi": { "0": "3", "1": ".", "2": "0", "3": ".", "4": "0" },
    "info": { "title": "api-nubble", "version": "1.0.0" },
    "/uploads/*": {
      "get": {
        "summary": " (route.ts)",
        "description": "",
        "parameters": [],
        "tags": ["*"],
        "responses": { "200": { "description": "OK", "content": { "application/json": {} } } },
        "security": []
      }
    },
    "/messages/{id}": {
      "get": {
        "summary": "Get a single instance of :id (MessageController::show)",
        "description": "GET MESSAGE BY ID",
        "parameters": [
          { "in": "path", "name": "id", "schema": { "type": "string" }, "required": true }
        ],
        "tags": ["MESSAGE"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }]
      },
      "put": {
        "summary": "Update :id (MessageController::update)",
        "description": "UPDATE MESSAGE BY ID",
        "parameters": [
          { "in": "path", "name": "id", "schema": { "type": "string" }, "required": true }
        ],
        "tags": ["MESSAGE"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Message" },
              "example": { "message": "string" }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete :id (MessageController::destroy)",
        "description": "DELETE MESSAGE BY ID",
        "parameters": [
          { "in": "path", "name": "id", "schema": { "type": "string" }, "required": true }
        ],
        "tags": ["MESSAGE"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }]
      }
    },
    "/messages": {
      "post": {
        "summary": " (MessageController::store)",
        "description": "CRETE A NEW MESSAGE",
        "parameters": [],
        "tags": ["MESSAGE"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Message" },
              "example": { "sender_id": "number", "recipient_id": "number", "message": "string" }
            }
          }
        }
      }
    },
    "/user/post_comment": {
      "post": {
        "summary": " (route.ts)",
        "description": "CREATE A POST'S COMMENT",
        "parameters": [],
        "tags": ["POST_COMMENT"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PostComment" },
              "example": { "post_id": 1, "message": "Adorei a sua postagem!" }
            }
          }
        }
      },
      "get": {
        "summary": " (route.ts)",
        "description": "GET A COMMENT'S PAGINATION",
        "parameters": [
          { "name": "page", "description": "Number of the page", "in": "query", "required": false },
          {
            "name": "per_page",
            "description": "Number of how much comments to show each page",
            "in": "query",
            "required": false
          },
          { "name": "post_id", "description": "ID of the post", "in": "query", "required": false }
        ],
        "tags": ["POST_COMMENT"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }]
      }
    },
    "/user/post_comment/{commentId}": {
      "delete": {
        "summary": " (route.ts)",
        "description": "DELETE COMMENT BY ID",
        "parameters": [
          { "in": "path", "name": "commentId", "schema": { "type": "string" }, "required": true }
        ],
        "tags": ["POST_COMMENT"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }]
      },
      "put": {
        "summary": " (route.ts)",
        "description": "UPDATE COMMENT BY ID",
        "parameters": [
          { "in": "path", "name": "commentId", "schema": { "type": "string" }, "required": true }
        ],
        "tags": ["POST_COMMENT"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PostComment" },
              "example": { "message": "Um novo comentário" }
            }
          }
        }
      },
      "get": {
        "summary": " (route.ts)",
        "description": "GET COMMENT BY ID",
        "parameters": [
          { "in": "path", "name": "commentId", "schema": { "type": "string" }, "required": true }
        ],
        "tags": ["POST_COMMENT"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }]
      }
    },
    "/user/post_comment_reaction": {
      "post": {
        "summary": " (route.ts)",
        "description": "CRETE A NEW POST'S COMMENT'S REACTION",
        "parameters": [],
        "tags": ["POST_COMMENT_REACTION"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }],
        "requestBody": { "content": { "application/json": {} } }
      },
      "get": {
        "summary": " (route.ts)",
        "description": "",
        "parameters": [],
        "tags": ["POST_COMMENT_REACTION"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }]
      },
      "put": {
        "summary": " (route.ts)",
        "description": "",
        "parameters": [],
        "tags": ["POST_COMMENT_REACTION"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }],
        "requestBody": { "content": { "application/json": {} } }
      }
    },
    "/user/post_comment_reaction/{commentId}": {
      "delete": {
        "summary": " (route.ts)",
        "description": "",
        "parameters": [
          { "in": "path", "name": "commentId", "schema": { "type": "string" }, "required": true }
        ],
        "tags": ["POST_COMMENT_REACTION"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }]
      }
    },
    "/user/post_reaction": {
      "post": {
        "summary": " (route.ts)",
        "description": "",
        "parameters": [],
        "tags": ["POST_REACTION"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PostReaction" },
              "example": { "post_id": "number", "emoji_type": "like | favorite" }
            }
          }
        }
      },
      "put": {
        "summary": " (route.ts)",
        "description": "",
        "parameters": [],
        "tags": ["POST_REACTION"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }],
        "requestBody": { "content": { "application/json": {} } }
      },
      "get": {
        "summary": " (route.ts)",
        "description": "",
        "parameters": [],
        "tags": ["POST_REACTION"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }]
      }
    },
    "/user/post_reaction/{postId}": {
      "delete": {
        "summary": " (route.ts)",
        "description": "",
        "parameters": [
          { "in": "path", "name": "postId", "schema": { "type": "string" }, "required": true }
        ],
        "tags": ["POST_REACTION"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }]
      }
    },
    "/user/post": {
      "get": {
        "summary": " (route.ts)",
        "description": "GET A PAGINATED POST LIST",
        "parameters": [
          { "name": "page", "description": "Number of the page", "in": "query", "required": false },
          {
            "name": "per_page",
            "description": "Number of how much Posts to show per page",
            "in": "query",
            "required": false
          },
          {
            "name": "search",
            "description": "Additional to search by post data",
            "in": "query",
            "required": false
          }
        ],
        "tags": ["POST"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }]
      },
      "post": {
        "summary": " (route.ts)",
        "description": "CREATE A NEW POST",
        "parameters": [],
        "tags": ["POST"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Post" },
              "example": { "imageUrl": "string", "text": "optional | string" }
            }
          }
        }
      }
    },
    "/user/post/{id}": {
      "get": {
        "summary": " (route.ts)",
        "description": "GET A POST BY ID",
        "parameters": [
          { "in": "path", "name": "id", "schema": { "type": "string" }, "required": true }
        ],
        "tags": ["POST"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }]
      },
      "put": {
        "summary": " (route.ts)",
        "description": "UPDATE A POST BY ID",
        "parameters": [
          { "in": "path", "name": "id", "schema": { "type": "string" }, "required": true }
        ],
        "tags": ["POST"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Post" },
              "example": { "text": "optional | string" }
            }
          }
        }
      },
      "delete": {
        "summary": " (route.ts)",
        "description": "DELETE USER BY ID",
        "parameters": [
          { "in": "path", "name": "id", "schema": { "type": "string" }, "required": true }
        ],
        "tags": ["POST"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }]
      }
    },
    "/users": {
      "get": {
        "summary": " (UsersController::list)",
        "description": "GET A PAGINATED USER LIST",
        "parameters": [
          { "name": "page", "description": "Number of the page", "in": "query", "required": false },
          {
            "name": "per_page",
            "description": "Number of how much users to show per page",
            "in": "query",
            "required": false
          },
          {
            "name": "search",
            "description": "Additional to search by user data",
            "in": "query",
            "required": false
          }
        ],
        "tags": ["USER"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }]
      }
    },
    "/users/{id}": {
      "get": {
        "summary": " (UsersController::get)",
        "description": "GET A USER BY ID",
        "parameters": [
          { "in": "path", "name": "id", "schema": { "type": "string" }, "required": true }
        ],
        "tags": ["USER"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }]
      },
      "put": {
        "summary": " (UsersController::edit)",
        "description": "UPDATE A USER BY ID",
        "parameters": [
          { "in": "path", "name": "id", "schema": { "type": "string" }, "required": true }
        ],
        "tags": ["USER"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/User" },
              "example": {
                "firstName": "optional | Lucas",
                "lastName": "optional | Garcez",
                "username": "optional | lucas",
                "email": "optional | lucas@gmail.com",
                "password": "optional | lucas123",
                "password_confirmation": "optional | lucas123"
              }
            }
          }
        }
      },
      "delete": {
        "summary": " (UsersController::delete)",
        "description": "DELETE A USER BY ID",
        "parameters": [
          { "in": "path", "name": "id", "schema": { "type": "string" }, "required": true }
        ],
        "tags": ["USER"],
        "responses": {
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "BearerAuth": ["access"], "/messages/list": null }]
      }
    }
  },
  "components": {
    "responses": {
      "Forbidden": { "description": "Access token is missing or invalid" },
      "Accepted": { "description": "The request was accepted" },
      "Created": { "description": "The resource has been created" },
      "NotFound": { "description": "The resource has been created" },
      "NotAcceptable": { "description": "The resource has been created" }
    },
    "securitySchemes": { "BearerAuth": { "type": "http", "scheme": "bearer" } },
    "schemas": {
      "Any": { "description": "Any JSON object not defined as schema" },
      "Message": {
        "type": "object",
        "properties": {
          "static_table_messages": { "type": "string", "example": "string" },
          "id": { "type": "number", "example": 399 },
          "sender_id": { "type": "number", "example": 96 },
          "recipient_id": { "type": "number", "example": 104 },
          "message": { "type": "string", "example": "string" },
          "created_at": {
            "type": "string",
            "example": "2021-03-23T16:13:08.489+01:00",
            "format": "date-time"
          },
          "sender": { "$ref": "#/components/schemas/User", "example": "string" },
          "recipient": { "$ref": "#/components/schemas/User", "example": "string" }
        },
        "description": "Model"
      },
      "Post": {
        "type": "object",
        "properties": {
          "static_table_posts": { "type": "string", "example": "string" },
          "id": { "type": "number", "example": 946 },
          "text": { "type": "string", "example": "string" },
          "user_id": { "type": "number", "example": 175 },
          "image_url": { "type": "string", "example": "string" },
          "status": { "type": "string", "example": "string" },
          "is_fixed": { "type": "boolean", "example": true },
          "is_activated": { "type": "boolean", "example": true },
          "created_at": {
            "type": "string",
            "example": "2021-03-23T16:13:08.489+01:00",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "example": "2021-03-23T16:13:08.489+01:00",
            "format": "date-time"
          },
          "user": { "$ref": "#/components/schemas/User", "example": "string" },
          "contents": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PostContent", "example": "string" }
          },
          "reactions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PostReaction", "example": "string" }
          },
          "reaction_count": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PostReaction", "example": "string" }
          },
          "comments": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PostComment", "example": "string" }
          },
          "serialize_extras_true": { "type": "string", "example": "string" }
        },
        "description": "Model"
      },
      "PostComment": {
        "type": "object",
        "properties": {
          "static_table_post_comments": { "type": "string", "example": "string" },
          "id": { "type": "number", "example": 342 },
          "message": { "type": "string", "example": "string" },
          "user_id": { "type": "number", "example": 118 },
          "post_id": { "type": "number", "example": 141 },
          "reply_comment_id": { "type": "number", "example": 219 },
          "hub_event_id": { "type": "number", "example": 797 },
          "created_at": {
            "type": "string",
            "example": "2021-03-23T16:13:08.489+01:00",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "example": "2021-03-23T16:13:08.489+01:00",
            "format": "date-time"
          },
          "user": { "$ref": "#/components/schemas/User", "example": "string" },
          "post": { "$ref": "#/components/schemas/Post", "example": "string" },
          "replied": { "$ref": "#/components/schemas/PostComment", "example": "string" },
          "replies": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PostComment", "example": "string" }
          },
          "reactions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PostCommentReaction", "example": "string" }
          },
          "reaction_count": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PostCommentReaction", "example": "string" }
          },
          "serialize_extras_true": { "type": "string", "example": "string" }
        },
        "description": "Model"
      },
      "PostCommentReaction": {
        "type": "object",
        "properties": {
          "static_table_post_comment_reactions": { "type": "string", "example": "string" },
          "id": { "type": "number", "example": 168 },
          "emoji_type": { "type": "string", "example": "string" },
          "user_id": { "type": "number", "example": 195 },
          "post_comment_id": { "type": "number", "example": 857 },
          "hub_event_id": { "type": "number", "example": 790 },
          "created_at": {
            "type": "string",
            "example": "2021-03-23T16:13:08.489+01:00",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "example": "2021-03-23T16:13:08.489+01:00",
            "format": "date-time"
          },
          "user": { "$ref": "#/components/schemas/User", "example": "string" },
          "comment": { "$ref": "#/components/schemas/PostComment", "example": "string" },
          "serialize_extras_true": { "type": "string", "example": "string" }
        },
        "description": "Model"
      },
      "PostContent": {
        "type": "object",
        "properties": {
          "static_table_post_contents": { "type": "string", "example": "string" },
          "id": { "type": "number", "example": 471 },
          "content_url": { "type": "string", "example": "string" },
          "content_thumb_url": { "type": "string", "example": "string" },
          "type": { "type": "string", "example": "string" },
          "subtype": { "type": "string", "example": "string" },
          "width": { "type": "number", "example": 174 },
          "height": { "type": "number", "example": 827 },
          "hub_event_id": { "type": "number", "example": 79 },
          "user": { "$ref": "#/components/schemas/User", "example": "string" },
          "post": { "$ref": "#/components/schemas/Post", "example": "string" }
        },
        "description": "Model"
      },
      "PostReaction": {
        "type": "object",
        "properties": {
          "static_table_post_reactions": { "type": "string", "example": "string" },
          "id": { "type": "number", "example": 326 },
          "emoji_type": { "type": "string", "example": "string" },
          "user_id": { "type": "number", "example": 860 },
          "post_id": { "type": "number", "example": 404 },
          "hub_event_id": { "type": "number", "example": 238 },
          "created_at": {
            "type": "string",
            "example": "2021-03-23T16:13:08.489+01:00",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "example": "2021-03-23T16:13:08.489+01:00",
            "format": "date-time"
          },
          "user": { "$ref": "#/components/schemas/User", "example": "string" },
          "post": { "$ref": "#/components/schemas/Post", "example": "string" },
          "serialize_extras_true": { "type": "string", "example": "string" }
        },
        "description": "Model"
      },
      "User": {
        "type": "object",
        "properties": {
          "static_table_users": { "type": "string", "example": "string" },
          "id": { "type": "string", "example": "string" },
          "full_name": { "type": "string", "example": "string" },
          "first_name": { "type": "string", "example": "string" },
          "last_name": { "type": "string", "example": "string" },
          "username": { "type": "string", "example": "string" },
          "profile_url": { "type": "string", "example": "string" },
          "email": { "type": "string", "example": "johndoe@example.com", "format": "email" },
          "remember_me_token": { "type": "string", "example": "string" },
          "is_online": { "type": "boolean", "example": true },
          "remember_me_token_created_at": {
            "type": "string",
            "example": "2021-03-23T16:13:08.489+01:00",
            "format": "date-time"
          },
          "messages": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Message", "example": "string" }
          }
        },
        "description": "Model"
      }
    }
  },
  "tags": [
    { "name": "AUTH", "description": "Everything related to AUTH" },
    { "name": "*", "description": "Everything related to *" },
    { "name": "USER", "description": "Everything related to USER" },
    { "name": "POST", "description": "Everything related to POST" },
    { "name": "POST_REACTION", "description": "Everything related to POST_REACTION" },
    { "name": "POST_COMMENT", "description": "Everything related to POST_COMMENT" },
    {
      "name": "POST_COMMENT_REACTION",
      "description": "Everything related to POST_COMMENT_REACTION"
    },
    { "name": "MESSAGE", "description": "Everything related to MESSAGE" }
  ]
}
