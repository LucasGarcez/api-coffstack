openapi: "3.0.0"
info:
  title: "api-nubble"
  version: "1.0.0"
components:
  responses:
    Forbidden:
      description: "Access token is missing or invalid"
    Accepted:
      description: "The request was accepted"
    Created:
      description: "The resource has been created"
    NotFound:
      description: "The resource has been created"
    NotAcceptable:
      description: "The resource has been created"
  securitySchemes:
    BearerAuth:
      type: "http"
      scheme: "bearer"
  schemas:
    Any:
      description: "Any JSON object not defined as schema"
    Message:
      type: "object"
      properties:
        static_table_messages:
          type: "string"
          example: "string"
        id:
          type: "number"
          example: 348
        sender_id:
          type: "number"
          example: 353
        recipient_id:
          type: "number"
          example: 563
        message:
          type: "string"
          example: "string"
        created_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        sender:
          $ref: "#/components/schemas/User"
          example: "string"
        recipient:
          $ref: "#/components/schemas/User"
          example: "string"
      description: "Model"
    Post:
      type: "object"
      properties:
        static_table_posts:
          type: "string"
          example: "string"
        id:
          type: "number"
          example: 609
        text:
          type: "string"
          example: "string"
        user_id:
          type: "number"
          example: 19
        image_url:
          type: "string"
          example: "string"
        status:
          type: "string"
          example: "string"
        is_fixed:
          type: "boolean"
          example: true
        is_activated:
          type: "boolean"
          example: true
        created_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updated_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        user:
          $ref: "#/components/schemas/User"
          example: "string"
        contents:
          type: "array"
          items:
            $ref: "#/components/schemas/PostContent"
            example: "string"
        reactions:
          type: "array"
          items:
            $ref: "#/components/schemas/PostReaction"
            example: "string"
        reaction_count:
          type: "array"
          items:
            $ref: "#/components/schemas/PostReaction"
            example: "string"
        comments:
          type: "array"
          items:
            $ref: "#/components/schemas/PostComment"
            example: "string"
        serialize_extras_true:
          type: "string"
          example: "string"
      description: "Model"
    PostComment:
      type: "object"
      properties:
        static_table_post_comments:
          type: "string"
          example: "string"
        id:
          type: "number"
          example: 238
        message:
          type: "string"
          example: "string"
        user_id:
          type: "number"
          example: 591
        post_id:
          type: "number"
          example: 945
        hub_event_id:
          type: "number"
          example: 123
        created_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updated_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        user:
          $ref: "#/components/schemas/User"
          example: "string"
        post:
          $ref: "#/components/schemas/Post"
          example: "string"
        serialize_extras_true:
          type: "string"
          example: "string"
      description: "Model"
    PostContent:
      type: "object"
      properties:
        static_table_post_contents:
          type: "string"
          example: "string"
        id:
          type: "number"
          example: 148
        content_url:
          type: "string"
          example: "string"
        content_thumb_url:
          type: "string"
          example: "string"
        type:
          type: "string"
          example: "string"
        subtype:
          type: "string"
          example: "string"
        width:
          type: "number"
          example: 409
        height:
          type: "number"
          example: 635
        hub_event_id:
          type: "number"
          example: 596
        user:
          $ref: "#/components/schemas/User"
          example: "string"
        post:
          $ref: "#/components/schemas/Post"
          example: "string"
      description: "Model"
    PostReaction:
      type: "object"
      properties:
        static_table_post_reactions:
          type: "string"
          example: "string"
        id:
          type: "number"
          example: 43
        emoji_type:
          type: "string"
          example: "string"
        user_id:
          type: "number"
          example: 953
        post_id:
          type: "number"
          example: 585
        hub_event_id:
          type: "number"
          example: 632
        created_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updated_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        user:
          $ref: "#/components/schemas/User"
          example: "string"
        post:
          $ref: "#/components/schemas/Post"
          example: "string"
        serialize_extras_true:
          type: "string"
          example: "string"
      description: "Model"
    User:
      type: "object"
      properties:
        static_table_users:
          type: "string"
          example: "string"
        id:
          type: "string"
          example: "string"
        full_name:
          type: "string"
          example: "string"
        first_name:
          type: "string"
          example: "string"
        last_name:
          type: "string"
          example: "string"
        username:
          type: "string"
          example: "string"
        profile_url:
          type: "string"
          example: "string"
        email:
          type: "string"
          example: "johndoe@example.com"
          format: "email"
        temp_token:
          type: "string"
          example: "string"
        remember_me_token:
          type: "string"
          example: "string"
        is_online:
          type: "boolean"
          example: true
        temp_token_created_at:
          $ref: "#/components/schemas/Date"
          example: "string"
        remember_me_token_created_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        messages:
          type: "array"
          items:
            $ref: "#/components/schemas/Message"
            example: "string"
      description: "Model"
paths:
  /uploads/*:
    get:
      summary: " (route.ts)"
      description: ""
      parameters: []
      tags:
        - "*"
      responses:
        200:
          description: "OK"
          content:
            application/json: {}
      security: []
  /users:
    get:
      summary: " (UsersController::list)"
      description: ""
      parameters: []
      tags: []
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
  /users/{id}:
    get:
      summary: " (UsersController::get)"
      description: ""
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - ":ID"
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
    put:
      summary: " (UsersController::edit)"
      description: ""
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - ":ID"
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
    delete:
      summary: " (UsersController::delete)"
      description: ""
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - ":ID"
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
  /profile/edit-password:
    post:
      summary: "Edit Password endpoint (AuthController::editPassword)"
      description: ""
      parameters: []
      tags:
        - "EDIT-PASSWORD"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "object"
              example:
                message: "Password changed successfully"
          description: "OK: {\"message\": \"Password changed successfully\"}"
        401:
          content:
            application/json:
              schema:
                type: "object"
              example:
                errors:
                  - message: "User not found"
          description: "Unauthorized: {\"errors\": [{\"message\": \"User not found\"}]}"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
            example:
              password: "string"
  /profile/logout:
    get:
      summary: "Logout endpoint (AuthController::logout)"
      description: "OK: {\"message\": \"Logout successfully\"}"
      parameters: []
      tags:
        - "LOGOUT"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "object"
              example:
                message: "Logout successfully"
          description: "OK: {\"message\": \"Logout successfully\"}"
        401:
          content:
            application/json:
              schema:
                type: "object"
              example:
                errors:
                  - message: "E_UNAUTHORIZED_ACCESS: Unauthorized access"
          description: "Unauthorized: {\"errors\": [{\"message\": \"E_UNAUTHORIZED_ACCESS: Unauthorized access\"}]}"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
  /register:
    post:
      summary: "Register endpoint (AuthController::register)"
      description: ""
      parameters:
        - in: "path"
          name: "provider"
          description: "The login provider to be used"
          schema:
            example: "google"
            type: "string"
            enum:
              - "google"
              - "facebook"
              - "apple"
          required: true
      tags: []
      responses:
        200:
          content:
            application/json:
              schema:
                type: "object"
              example:
                first_name: "Lucas"
                last_name: "Garcez"
                username: "lucas123"
                email: "lucas123@gmail.com"
                full_name: "Lucas Garcez"
                id: "number"
          description: "OK: {\"first_name\": \"Lucas\",\"last_name\": \"Garcez\",\"username\": \"lucas123\",\"email\": \"lucas123@gmail.com\",\"full_name\": \"Lucas Garcez\",\"id\": \"number\"}"
        422:
          content:
            application/json:
              schema:
                type: "object"
              example:
                errors:
                  - rule: "unique"
                    field: "username"
                    message: "unique validation failure"
          description: "Unprocessable Entity: { \"errors\": [{\"rule\": \"unique\", \"field\": \"username\", \"message\": \"unique validation failure\"}]}"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
            example:
              firstName: "Lucas"
              lastName: "Garcez"
              username: "lucas123"
              email: "lucas123@gmail.com"
              password: "password"
              password_confirmation: "password"
  /login:
    post:
      summary: "Login endpoint (AuthController::login)"
      description: ""
      parameters: []
      tags: []
      responses:
        200:
          content:
            application/json:
              schema:
                type: "object"
              example:
                auth:
                  type: "bearer"
                  token: "string"
          description: "OK: { \"auth\": {\"type\": \"bearer\", \"token\": \"string\"}}"
        401:
          content:
            application/json:
              schema:
                type: "object"
              example:
                message: "Unable to login, please check your credentials or try again later."
          description: "Unauthorized: {\"message\": \"Unable to login, please check your credentials or try again later.\"}"
        422:
          content:
            application/json:
              schema:
                type: "object"
              example:
                errors:
                  - rule: "required"
                    field: "email"
                    message: "required validation failed"
          description: "Unprocessable Entity: { \"errors\": [{\"rule\": \"required\", \"field\": \"email\", \"message\": \"required validation failed\"}]}"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
            example:
              email: "mariajulia@coffstack.com"
              password: "password"
  /forgot-password:
    post:
      summary: "Forgot Password endpoint (AuthController::forgotPassword)"
      description: ""
      parameters: []
      tags: []
      responses:
        200:
          content:
            application/json:
              schema:
                type: "object"
              example:
                message: "Token sent to your email"
          description: "OK: {\"message\": \"Token sent to your email\"}"
        401:
          content:
            application/json:
              schema:
                type: "object"
              example:
                errors:
                  - message: "User not found"
          description: "Unauthorized: {\"errors\": [{\"message\": \"User not found\"}]}"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
            example:
              email: "string"
  /reset-password/{tempToken}/{email}:
    get:
      summary: "Reset Password endpoint (AuthController::resetPassword)"
      description: "OK: {\"message\": \"Password changed successfully\"}"
      parameters:
        - in: "path"
          name: "tempToken"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "email"
          schema:
            type: "string"
          required: true
      tags:
        - ":TEMPTOKEN"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "object"
              example:
                message: "Password changed successfully"
          description: "OK: {\"message\": \"Password changed successfully\"}"
        401:
          content:
            application/json:
              schema:
                type: "object"
              example:
                errors:
                  - message: "User not found"
          description: "Unauthorized: {\"errors\": [{\"message\": \"User not found\"}]}"
      security: []
  /refresh-token:
    post:
      summary: " (AuthController::refreshToken)"
      description: ""
      parameters: []
      tags: []
      responses:
        201:
          description: "Created"
          content:
            application/json: {}
      security: []
      requestBody:
        content:
          application/json: {}
  /validate-username:
    get:
      summary: "ValidateUsername endpoint (AuthController::isUsernameAvailable)"
      description: "OK: {\"message\": [\"username is not available\", \"OR\", \"username is available\"], \"isAvailable\": [\"false\",\"OR\", \"true\"]}"
      parameters: []
      tags: []
      responses:
        200:
          content:
            application/json:
              schema:
                type: "object"
              example:
                message:
                  - "username is not available"
                  - "OR"
                  - "username is available"
                isAvailable:
                  - "false"
                  - "OR"
                  - "true"
          description: "OK: {\"message\": [\"username is not available\", \"OR\", \"username is available\"], \"isAvailable\": [\"false\",\"OR\", \"true\"]}"
        400:
          content:
            application/json:
              schema:
                type: "object"
              example:
                message: "username is required"
          description: "Bad Request: {\"message\": \"username is required\"}"
        500:
          content:
            application/json:
              schema:
                type: "object"
              example:
                message: "Internal server error"
          description: "Internal Server Error: {\"message\": \"Internal server error\"}"
      security: []
  /validate-email:
    get:
      summary: " (AuthController::isEmailAvailable)"
      description: ""
      parameters: []
      tags: []
      responses:
        200:
          description: "OK"
          content:
            application/json: {}
      security: []
  /user/post:
    get:
      summary: " (route.ts)"
      description: ""
      parameters: []
      tags:
        - "POST"
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
    post:
      summary: " (route.ts)"
      description: ""
      parameters: []
      tags:
        - "POST"
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
  /user/post/{id}:
    get:
      summary: " (route.ts)"
      description: ""
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "POST"
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
    put:
      summary: " (route.ts)"
      description: ""
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "POST"
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
    delete:
      summary: " (route.ts)"
      description: ""
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "POST"
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
  /user/post_reaction:
    post:
      summary: " (route.ts)"
      description: ""
      parameters: []
      tags:
        - "POST_REACTION"
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
    put:
      summary: " (route.ts)"
      description: ""
      parameters: []
      tags:
        - "POST_REACTION"
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
    get:
      summary: " (route.ts)"
      description: ""
      parameters: []
      tags:
        - "POST_REACTION"
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
  /user/post_reaction/x:postId:
    delete:
      summary: " (route.ts)"
      description: ""
      parameters: []
      tags:
        - "POST_REACTION"
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
  /user/post_comment:
    post:
      summary: " (route.ts)"
      description: ""
      parameters: []
      tags:
        - "POST_COMMENT"
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
    get:
      summary: " (route.ts)"
      description: ""
      parameters: []
      tags:
        - "POST_COMMENT"
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
  /user/post_comment/{commentId}:
    delete:
      summary: " (route.ts)"
      description: ""
      parameters:
        - in: "path"
          name: "commentId"
          schema:
            type: "string"
          required: true
      tags:
        - "POST_COMMENT"
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
    put:
      summary: " (route.ts)"
      description: ""
      parameters:
        - in: "path"
          name: "commentId"
          schema:
            type: "string"
          required: true
      tags:
        - "POST_COMMENT"
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
    get:
      summary: " (route.ts)"
      description: ""
      parameters:
        - in: "path"
          name: "commentId"
          schema:
            type: "string"
          required: true
      tags:
        - "POST_COMMENT"
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
  /messages/list:
    get:
      summary: "Get a list of list (MessageController::index)"
      description: ""
      parameters: []
      tags:
        - "LIST"
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
  /messages/{id}:
    get:
      summary: "Get a single instance of :id (MessageController::show)"
      description: ""
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - ":ID"
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
    put:
      summary: "Update :id (MessageController::update)"
      description: ""
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - ":ID"
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
    delete:
      summary: "Delete :id (MessageController::destroy)"
      description: ""
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - ":ID"
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
  /messages:
    post:
      summary: " (MessageController::store)"
      description: ""
      parameters: []
      tags: []
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
  /:
    get:
      summary: " (route.ts)"
      description: ""
      parameters: []
      tags: []
      responses:
        200:
          description: "OK"
          content:
            application/json: {}
      security: []
tags:
  - name: "*"
    description: "Everything related to *"
  - name: ":ID"
    description: "Everything related to :ID"
  - name: "EDIT-PASSWORD"
    description: "Everything related to EDIT-PASSWORD"
  - name: "LOGOUT"
    description: "Everything related to LOGOUT"
  - name: ":TEMPTOKEN"
    description: "Everything related to :TEMPTOKEN"
  - name: "POST"
    description: "Everything related to POST"
  - name: "POST_REACTION"
    description: "Everything related to POST_REACTION"
  - name: "POST_COMMENT"
    description: "Everything related to POST_COMMENT"
  - name: "LIST"
    description: "Everything related to LIST"
